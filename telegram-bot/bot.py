import os
import logging
from dotenv import load_dotenv
load_dotenv()

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import httpx
from handlers import parse_uzbek_russian_message

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

BACKEND_URL = os.getenv('ENV_BACKEND_URL', 'http://localhost:8000')
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'http://localhost:3000')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command"""
    user_id = update.effective_user.id
    
    # Check if user is authenticated
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(f'{BACKEND_URL}/api/auth/status/{user_id}')
            is_authenticated = response.json().get('authenticated', False)
        except:
            is_authenticated = False
    
    if is_authenticated:
        await update.message.reply_text(
            "üéâ Salom! Men sizning shaxsiy yordamchingizman.\n"
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
            "Menga xabar yozing va men:\n"
            "üìÖ Google Calendar'ga voqea qo'shaman\n"
            "üìù Google Keep'ga eslatma yarataman\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –∏ —è:\n"
            "üìÖ –î–æ–±–∞–≤–ª—é —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar\n"
            "üìù –°–æ–∑–¥–∞–º –∑–∞–º–µ—Ç–∫—É –≤ Google Keep\n\n"
            "Misol/–ü—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ 'Ertaga soat 3 da uchrashuv' ‚Üí Calendar\n"
            "‚Ä¢ 'Non va sut sotib olish' ‚Üí Keep"
        )
    else:
        keyboard = [[InlineKeyboardButton("üîê Google bilan kirish / –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google", url=f"{WEBAPP_URL}?user_id={user_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üëã Assalomu alaykum! Google hisobingizni ulash kerak.\n"
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–∞—à Google –∞–∫–∫–∞—É–Ω—Ç.\n\n"
            "Tugmani bosing / –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
            reply_markup=reply_markup
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /help command"""
    await update.message.reply_text(
        "üìñ Yordam / –ü–æ–º–æ—â—å:\n\n"
        "Men tabiiy tilda yozilgan xabarlarni tushunaman:\n"
        "–Ø –ø–æ–Ω–∏–º–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ:\n\n"
        "üìÖ Calendar uchun / –¥–ª—è Calendar:\n"
        "‚Ä¢ 'Ertaga soat 14:00 da doktor'\n"
        "‚Ä¢ '–ó–∞–≤—Ç—Ä–∞ –≤ 14:00 –∫ –≤—Ä–∞—á—É'\n"
        "‚Ä¢ 'Dushanba kuni soat 10 da yig'ilish'\n"
        "‚Ä¢ '–í –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10 —Å–æ–±—Ä–∞–Ω–∏–µ'\n\n"
        "üìù Keep uchun / –¥–ª—è Keep:\n"
        "‚Ä¢ 'Eslatma: non va sut olish'\n"
        "‚Ä¢ '–ó–∞–º–µ—Ç–∫–∞: –∫—É–ø–∏—Ç—å —Ö–ª–µ–± –∏ –º–æ–ª–æ–∫–æ'\n"
        "‚Ä¢ 'Kitob o'qishni unutma'\n"
        "‚Ä¢ '–ù–µ –∑–∞–±—ã—Ç—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É'\n\n"
        "Buyruqlar / –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - Boshlash / –ù–∞—á–∞—Ç—å\n"
        "/help - Yordam / –ü–æ–º–æ—â—å\n"
        "/auth - Qayta kirish / –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n"
        "/status - Holat / –°—Ç–∞—Ç—É—Å"
    )

async def auth_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /auth command"""
    user_id = update.effective_user.id
    keyboard = [[InlineKeyboardButton("üîê Google bilan kirish / –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google", url=f"{WEBAPP_URL}?user_id={user_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "Google hisobingizni ulash uchun tugmani bosing:\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google –∞–∫–∫–∞—É–Ω—Ç–∞:",
        reply_markup=reply_markup
    )

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /status command"""
    user_id = update.effective_user.id
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(f'{BACKEND_URL}/api/auth/status/{user_id}')
            data = response.json()
            
            if data.get('authenticated'):
                await update.message.reply_text(
                    f"‚úÖ Ulangan / –ü–æ–¥–∫–ª—é—á–µ–Ω–æ\n"
                    f"üìß Email: {data.get('email', 'N/A')}\n"
                    f"üìÖ Calendar: ‚úÖ\n"
                    f"üìù Keep: ‚úÖ"
                )
            else:
                await update.message.reply_text(
                    "‚ùå Ulanmagan / –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ\n"
                    "/auth buyrug'ini ishga tushiring\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth"
                )
        except Exception as e:
            logger.error(f"Status check error: {e}")
            await update.message.reply_text("‚ö†Ô∏è Xatolik / –û—à–∏–±–∫–∞")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle incoming text messages"""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    # Check authentication
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(f'{BACKEND_URL}/api/auth/status/{user_id}')
            if not response.json().get('authenticated'):
                keyboard = [[InlineKeyboardButton("üîê Kirish / –í–æ–π—Ç–∏", url=f"{WEBAPP_URL}?user_id={user_id}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(
                    "‚ö†Ô∏è Avval Google hisobingizni ulang\n"
                    "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Google –∞–∫–∫–∞—É–Ω—Ç",
                    reply_markup=reply_markup
                )
                return
        except Exception as e:
            logger.error(f"Backend error: {e}")
            await update.message.reply_text("‚ö†Ô∏è Backend bilan aloqa yo'q / –ù–µ—Ç —Å–≤—è–∑–∏ —Å backend")
    
    # Send typing indicator
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    
    # Parse message
    parsed = parse_uzbek_russian_message(message_text)
    
    if not parsed:
        await update.message.reply_text(
            "ü§î Tushunmadim. Iltimos, aniqroq yozing.\n"
            "ü§î –ù–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–æ—á–Ω–µ–µ.\n\n"
            "Yordam uchun /help buyrug'ini ishlating"
        )
        return
    
    # Process based on intent
    async with httpx.AsyncClient(timeout=30.0) as client:
        try:
            if parsed['intent'] == 'calendar':
                response = await client.post(
                    f'{BACKEND_URL}/api/calendar/create',
                    json={
                        'user_id': user_id,
                        'title': parsed['title'],
                        'datetime': parsed['datetime'],
                        'description': parsed.get('description', '')
                    }
                )
                
                if response.status_code == 200:
                    data = response.json()
                    await update.message.reply_text(
                        f"‚úÖ Calendar'ga qo'shildi / –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ Calendar\n\n"
                        f"üìÖ {parsed['title']}\n"
                        f"üïê {parsed['datetime']}\n"
                        f"üîó {data.get('link', '')}"
                    )
                else:
                    raise Exception("Calendar creation failed")
                    
            elif parsed['intent'] == 'note':
                response = await client.post(
                    f'{BACKEND_URL}/api/notes/create',
                    json={
                        'user_id': user_id,
                        'title': parsed['title'],
                        'content': parsed.get('content', '')
                    }
                )
                
                if response.status_code == 200:
                    await update.message.reply_text(
                        f"‚úÖ Keep'ga saqlandi / –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Keep\n\n"
                        f"üìù {parsed['title']}"
                    )
                else:
                    raise Exception("Note creation failed")
                    
        except Exception as e:
            logger.error(f"API Error: {e}")
            await update.message.reply_text(
                "‚ùå Xatolik yuz berdi / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n"
                "Iltimos qayta urinib ko'ring / –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
            )

def main():
    if not BOT_TOKEN:
        raise ValueError("TELEGRAM_BOT_TOKEN not set!")

    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("auth", auth_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("Bot started!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()